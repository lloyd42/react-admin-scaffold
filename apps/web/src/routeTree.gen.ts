/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from "./routes/__root";
import { Route as LayoutRouteImport } from "./routes/_layout";
import { Route as LayoutAdminIndexRouteImport } from "./routes/_layout/admin/index";
import { Route as LayoutAdminPage1RouteImport } from "./routes/_layout/admin/page1";
import { Route as LayoutAdminPage2RouteImport } from "./routes/_layout/admin/page2";
import { Route as LayoutAdminPage3RouteImport } from "./routes/_layout/admin/page3";
import { Route as LayoutListIndexRouteImport } from "./routes/_layout/list/index";
import { Route as LayoutListPage1RouteImport } from "./routes/_layout/list/page1";
import { Route as LayoutListPage2RouteImport } from "./routes/_layout/list/page2";
import { Route as LayoutListSubIndexRouteImport } from "./routes/_layout/list/sub/index";
import { Route as LayoutListSubPage1RouteImport } from "./routes/_layout/list/sub/page1";
import { Route as LayoutListSubPage2RouteImport } from "./routes/_layout/list/sub/page2";
import { Route as LayoutListSubPage3RouteImport } from "./routes/_layout/list/sub/page3";
import { Route as LayoutTableIndexRouteImport } from "./routes/_layout/table/index";
import { Route as LayoutTableIssueRouteImport } from "./routes/_layout/table/issue";
import { Route as LayoutWelcomeRouteImport } from "./routes/_layout.index";
import { Route as LoginRouteImport } from "./routes/login";

const LoginRoute = LoginRouteImport.update({
	id: "/login",
	path: "/login",
	getParentRoute: () => rootRouteImport,
} as any);
const LayoutRoute = LayoutRouteImport.update({
	id: "/_layout",
	getParentRoute: () => rootRouteImport,
} as any);
const LayoutWelcomeRoute = LayoutWelcomeRouteImport.update({
	id: "/welcome",
	path: "/welcome",
	getParentRoute: () => LayoutRoute,
} as any);
const LayoutTableIndexRoute = LayoutTableIndexRouteImport.update({
	id: "/table/",
	path: "/table/",
	getParentRoute: () => LayoutRoute,
} as any);
const LayoutListIndexRoute = LayoutListIndexRouteImport.update({
	id: "/list/",
	path: "/list/",
	getParentRoute: () => LayoutRoute,
} as any);
const LayoutAdminIndexRoute = LayoutAdminIndexRouteImport.update({
	id: "/admin/",
	path: "/admin/",
	getParentRoute: () => LayoutRoute,
} as any);
const LayoutTableIssueRoute = LayoutTableIssueRouteImport.update({
	id: "/table/issue",
	path: "/table/issue",
	getParentRoute: () => LayoutRoute,
} as any);
const LayoutListPage2Route = LayoutListPage2RouteImport.update({
	id: "/list/page2",
	path: "/list/page2",
	getParentRoute: () => LayoutRoute,
} as any);
const LayoutListPage1Route = LayoutListPage1RouteImport.update({
	id: "/list/page1",
	path: "/list/page1",
	getParentRoute: () => LayoutRoute,
} as any);
const LayoutAdminPage3Route = LayoutAdminPage3RouteImport.update({
	id: "/admin/page3",
	path: "/admin/page3",
	getParentRoute: () => LayoutRoute,
} as any);
const LayoutAdminPage2Route = LayoutAdminPage2RouteImport.update({
	id: "/admin/page2",
	path: "/admin/page2",
	getParentRoute: () => LayoutRoute,
} as any);
const LayoutAdminPage1Route = LayoutAdminPage1RouteImport.update({
	id: "/admin/page1",
	path: "/admin/page1",
	getParentRoute: () => LayoutRoute,
} as any);
const LayoutListSubIndexRoute = LayoutListSubIndexRouteImport.update({
	id: "/list/sub/",
	path: "/list/sub/",
	getParentRoute: () => LayoutRoute,
} as any);
const LayoutListSubPage3Route = LayoutListSubPage3RouteImport.update({
	id: "/list/sub/page3",
	path: "/list/sub/page3",
	getParentRoute: () => LayoutRoute,
} as any);
const LayoutListSubPage2Route = LayoutListSubPage2RouteImport.update({
	id: "/list/sub/page2",
	path: "/list/sub/page2",
	getParentRoute: () => LayoutRoute,
} as any);
const LayoutListSubPage1Route = LayoutListSubPage1RouteImport.update({
	id: "/list/sub/page1",
	path: "/list/sub/page1",
	getParentRoute: () => LayoutRoute,
} as any);

export interface FileRoutesByFullPath {
	"/login": typeof LoginRoute;
	"/welcome": typeof LayoutWelcomeRoute;
	"/admin/page1": typeof LayoutAdminPage1Route;
	"/admin/page2": typeof LayoutAdminPage2Route;
	"/admin/page3": typeof LayoutAdminPage3Route;
	"/list/page1": typeof LayoutListPage1Route;
	"/list/page2": typeof LayoutListPage2Route;
	"/table/issue": typeof LayoutTableIssueRoute;
	"/admin": typeof LayoutAdminIndexRoute;
	"/list": typeof LayoutListIndexRoute;
	"/table": typeof LayoutTableIndexRoute;
	"/list/sub/page1": typeof LayoutListSubPage1Route;
	"/list/sub/page2": typeof LayoutListSubPage2Route;
	"/list/sub/page3": typeof LayoutListSubPage3Route;
	"/list/sub": typeof LayoutListSubIndexRoute;
}
export interface FileRoutesByTo {
	"/login": typeof LoginRoute;
	"/welcome": typeof LayoutWelcomeRoute;
	"/admin/page1": typeof LayoutAdminPage1Route;
	"/admin/page2": typeof LayoutAdminPage2Route;
	"/admin/page3": typeof LayoutAdminPage3Route;
	"/list/page1": typeof LayoutListPage1Route;
	"/list/page2": typeof LayoutListPage2Route;
	"/table/issue": typeof LayoutTableIssueRoute;
	"/admin": typeof LayoutAdminIndexRoute;
	"/list": typeof LayoutListIndexRoute;
	"/table": typeof LayoutTableIndexRoute;
	"/list/sub/page1": typeof LayoutListSubPage1Route;
	"/list/sub/page2": typeof LayoutListSubPage2Route;
	"/list/sub/page3": typeof LayoutListSubPage3Route;
	"/list/sub": typeof LayoutListSubIndexRoute;
}
export interface FileRoutesById {
	__root__: typeof rootRouteImport;
	"/_layout": typeof LayoutRouteWithChildren;
	"/login": typeof LoginRoute;
	"/_layout/welcome": typeof LayoutWelcomeRoute;
	"/_layout/admin/page1": typeof LayoutAdminPage1Route;
	"/_layout/admin/page2": typeof LayoutAdminPage2Route;
	"/_layout/admin/page3": typeof LayoutAdminPage3Route;
	"/_layout/list/page1": typeof LayoutListPage1Route;
	"/_layout/list/page2": typeof LayoutListPage2Route;
	"/_layout/table/issue": typeof LayoutTableIssueRoute;
	"/_layout/admin/": typeof LayoutAdminIndexRoute;
	"/_layout/list/": typeof LayoutListIndexRoute;
	"/_layout/table/": typeof LayoutTableIndexRoute;
	"/_layout/list/sub/page1": typeof LayoutListSubPage1Route;
	"/_layout/list/sub/page2": typeof LayoutListSubPage2Route;
	"/_layout/list/sub/page3": typeof LayoutListSubPage3Route;
	"/_layout/list/sub/": typeof LayoutListSubIndexRoute;
}
export interface FileRouteTypes {
	fileRoutesByFullPath: FileRoutesByFullPath;
	fullPaths:
		| "/login"
		| "/welcome"
		| "/admin/page1"
		| "/admin/page2"
		| "/admin/page3"
		| "/list/page1"
		| "/list/page2"
		| "/table/issue"
		| "/admin"
		| "/list"
		| "/table"
		| "/list/sub/page1"
		| "/list/sub/page2"
		| "/list/sub/page3"
		| "/list/sub";
	fileRoutesByTo: FileRoutesByTo;
	to:
		| "/login"
		| "/welcome"
		| "/admin/page1"
		| "/admin/page2"
		| "/admin/page3"
		| "/list/page1"
		| "/list/page2"
		| "/table/issue"
		| "/admin"
		| "/list"
		| "/table"
		| "/list/sub/page1"
		| "/list/sub/page2"
		| "/list/sub/page3"
		| "/list/sub";
	id:
		| "__root__"
		| "/_layout"
		| "/login"
		| "/_layout/welcome"
		| "/_layout/admin/page1"
		| "/_layout/admin/page2"
		| "/_layout/admin/page3"
		| "/_layout/list/page1"
		| "/_layout/list/page2"
		| "/_layout/table/issue"
		| "/_layout/admin/"
		| "/_layout/list/"
		| "/_layout/table/"
		| "/_layout/list/sub/page1"
		| "/_layout/list/sub/page2"
		| "/_layout/list/sub/page3"
		| "/_layout/list/sub/";
	fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
	LayoutRoute: typeof LayoutRouteWithChildren;
	LoginRoute: typeof LoginRoute;
}

declare module "@tanstack/react-router" {
	interface FileRoutesByPath {
		"/login": {
			id: "/login";
			path: "/login";
			fullPath: "/login";
			preLoaderRoute: typeof LoginRouteImport;
			parentRoute: typeof rootRouteImport;
		};
		"/_layout": {
			id: "/_layout";
			path: "";
			fullPath: "";
			preLoaderRoute: typeof LayoutRouteImport;
			parentRoute: typeof rootRouteImport;
		};
		"/_layout/welcome": {
			id: "/_layout/welcome";
			path: "/welcome";
			fullPath: "/welcome";
			preLoaderRoute: typeof LayoutWelcomeRouteImport;
			parentRoute: typeof LayoutRoute;
		};
		"/_layout/table/": {
			id: "/_layout/table/";
			path: "/table";
			fullPath: "/table";
			preLoaderRoute: typeof LayoutTableIndexRouteImport;
			parentRoute: typeof LayoutRoute;
		};
		"/_layout/list/": {
			id: "/_layout/list/";
			path: "/list";
			fullPath: "/list";
			preLoaderRoute: typeof LayoutListIndexRouteImport;
			parentRoute: typeof LayoutRoute;
		};
		"/_layout/admin/": {
			id: "/_layout/admin/";
			path: "/admin";
			fullPath: "/admin";
			preLoaderRoute: typeof LayoutAdminIndexRouteImport;
			parentRoute: typeof LayoutRoute;
		};
		"/_layout/table/issue": {
			id: "/_layout/table/issue";
			path: "/table/issue";
			fullPath: "/table/issue";
			preLoaderRoute: typeof LayoutTableIssueRouteImport;
			parentRoute: typeof LayoutRoute;
		};
		"/_layout/list/page2": {
			id: "/_layout/list/page2";
			path: "/list/page2";
			fullPath: "/list/page2";
			preLoaderRoute: typeof LayoutListPage2RouteImport;
			parentRoute: typeof LayoutRoute;
		};
		"/_layout/list/page1": {
			id: "/_layout/list/page1";
			path: "/list/page1";
			fullPath: "/list/page1";
			preLoaderRoute: typeof LayoutListPage1RouteImport;
			parentRoute: typeof LayoutRoute;
		};
		"/_layout/admin/page3": {
			id: "/_layout/admin/page3";
			path: "/admin/page3";
			fullPath: "/admin/page3";
			preLoaderRoute: typeof LayoutAdminPage3RouteImport;
			parentRoute: typeof LayoutRoute;
		};
		"/_layout/admin/page2": {
			id: "/_layout/admin/page2";
			path: "/admin/page2";
			fullPath: "/admin/page2";
			preLoaderRoute: typeof LayoutAdminPage2RouteImport;
			parentRoute: typeof LayoutRoute;
		};
		"/_layout/admin/page1": {
			id: "/_layout/admin/page1";
			path: "/admin/page1";
			fullPath: "/admin/page1";
			preLoaderRoute: typeof LayoutAdminPage1RouteImport;
			parentRoute: typeof LayoutRoute;
		};
		"/_layout/list/sub/": {
			id: "/_layout/list/sub/";
			path: "/list/sub";
			fullPath: "/list/sub";
			preLoaderRoute: typeof LayoutListSubIndexRouteImport;
			parentRoute: typeof LayoutRoute;
		};
		"/_layout/list/sub/page3": {
			id: "/_layout/list/sub/page3";
			path: "/list/sub/page3";
			fullPath: "/list/sub/page3";
			preLoaderRoute: typeof LayoutListSubPage3RouteImport;
			parentRoute: typeof LayoutRoute;
		};
		"/_layout/list/sub/page2": {
			id: "/_layout/list/sub/page2";
			path: "/list/sub/page2";
			fullPath: "/list/sub/page2";
			preLoaderRoute: typeof LayoutListSubPage2RouteImport;
			parentRoute: typeof LayoutRoute;
		};
		"/_layout/list/sub/page1": {
			id: "/_layout/list/sub/page1";
			path: "/list/sub/page1";
			fullPath: "/list/sub/page1";
			preLoaderRoute: typeof LayoutListSubPage1RouteImport;
			parentRoute: typeof LayoutRoute;
		};
	}
}

interface LayoutRouteChildren {
	LayoutWelcomeRoute: typeof LayoutWelcomeRoute;
	LayoutAdminPage1Route: typeof LayoutAdminPage1Route;
	LayoutAdminPage2Route: typeof LayoutAdminPage2Route;
	LayoutAdminPage3Route: typeof LayoutAdminPage3Route;
	LayoutListPage1Route: typeof LayoutListPage1Route;
	LayoutListPage2Route: typeof LayoutListPage2Route;
	LayoutTableIssueRoute: typeof LayoutTableIssueRoute;
	LayoutAdminIndexRoute: typeof LayoutAdminIndexRoute;
	LayoutListIndexRoute: typeof LayoutListIndexRoute;
	LayoutTableIndexRoute: typeof LayoutTableIndexRoute;
	LayoutListSubPage1Route: typeof LayoutListSubPage1Route;
	LayoutListSubPage2Route: typeof LayoutListSubPage2Route;
	LayoutListSubPage3Route: typeof LayoutListSubPage3Route;
	LayoutListSubIndexRoute: typeof LayoutListSubIndexRoute;
}

const LayoutRouteChildren: LayoutRouteChildren = {
	LayoutWelcomeRoute: LayoutWelcomeRoute,
	LayoutAdminPage1Route: LayoutAdminPage1Route,
	LayoutAdminPage2Route: LayoutAdminPage2Route,
	LayoutAdminPage3Route: LayoutAdminPage3Route,
	LayoutListPage1Route: LayoutListPage1Route,
	LayoutListPage2Route: LayoutListPage2Route,
	LayoutTableIssueRoute: LayoutTableIssueRoute,
	LayoutAdminIndexRoute: LayoutAdminIndexRoute,
	LayoutListIndexRoute: LayoutListIndexRoute,
	LayoutTableIndexRoute: LayoutTableIndexRoute,
	LayoutListSubPage1Route: LayoutListSubPage1Route,
	LayoutListSubPage2Route: LayoutListSubPage2Route,
	LayoutListSubPage3Route: LayoutListSubPage3Route,
	LayoutListSubIndexRoute: LayoutListSubIndexRoute,
};

const LayoutRouteWithChildren =
	LayoutRoute._addFileChildren(LayoutRouteChildren);

const rootRouteChildren: RootRouteChildren = {
	LayoutRoute: LayoutRouteWithChildren,
	LoginRoute: LoginRoute,
};
export const routeTree = rootRouteImport
	._addFileChildren(rootRouteChildren)
	._addFileTypes<FileRouteTypes>();
